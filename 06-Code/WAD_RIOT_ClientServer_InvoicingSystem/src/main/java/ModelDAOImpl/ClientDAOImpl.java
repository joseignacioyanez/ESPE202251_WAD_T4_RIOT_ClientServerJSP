/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package ModelDAOImpl;

import Interfaces.ClientDAO;
import Model.Client;
import MongoDBConnection.MongoDBConnection;
import com.google.gson.Gson;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import static com.mongodb.client.model.Filters.eq;
import com.mongodb.client.model.Updates;
import com.mongodb.client.result.InsertOneResult;
import com.mongodb.client.result.UpdateResult;
import java.util.ArrayList;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.bson.types.ObjectId;

/**
 *
 * @author joseignacio
 */
public class ClientDAOImpl implements ClientDAO{
    //Attributes
    MongoDBConnection mongoConnection = new MongoDBConnection();
    MongoDatabase database = mongoConnection.getDatabase();
    MongoCollection<Document> clientsDBResult;
    Client client;
    

    @Override
    public boolean clientExists(String id) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public Client getClient(String id) {
        try {
            clientsDBResult = database.getCollection("clients");
            System.out.println("Got the clients Collection!");
            
            System.out.println("Id of Client: " + id);
            
            Document clientSearched = clientsDBResult.find(eq("_id", new ObjectId(id))).first();
            
            System.out.println("Client found JSON: " + clientSearched.toJson());
            
            Gson gsonMapperToObject = new Gson();
            client = gsonMapperToObject.fromJson(clientSearched.toJson(), Client.class);
            
            System.out.println("Client converted to Object: " + client);
            
        } catch (Exception e) {
            System.out.println("Could not get the client information " + e);
        }
        return client;
    }

    @Override
    public ArrayList<Client> listClients() {
        ArrayList<Client> clientsList = new ArrayList<>();
        
        try {
            clientsDBResult = database.getCollection("clients");
            FindIterable<Document> allClientsDocuments = clientsDBResult.find();
            
            System.out.println("All Clients: \n" + allClientsDocuments);
            
            for (Document clientResult : allClientsDocuments)
            {
                Gson gsonMapperToObject = new Gson();
                client = gsonMapperToObject.fromJson(clientResult.toJson(), Client.class);
                
                // Correct the Id generated by Gson
                String clientResultInJson = clientResult.toJson();
                String strippedOidFromJson = clientResultInJson.substring(18, 42); // Extraigo el $oid de mongo
                // Reemplazo el ObjectId creado por Gson con uno nuevo creado con el codigo de Mongo
                client.setId(new ObjectId(strippedOidFromJson));  
                
                System.out.println("Id as String of this client is: " + client.getId().toString());
                
                clientsList.add(client);
            }
            
        } catch (Exception e) {
            System.out.println("Could not get the clients List: " + e);
        }
        return clientsList;
    }

    @Override
    public boolean addClient(Client client) {
        boolean inserted = false;
        
        ObjectId objectId = new ObjectId();
        // Add user into DB
        try {
           
            InsertOneResult result = database.getCollection("clients").insertOne(
                    new Document().append("_id", objectId)
                    .append("idCard", client.getIdCard())
                    .append("name", client.getName())
                    .append("address", client.getAddress())
                    .append("cellphone", client.getCellphone())
                    .append("email", client.getEmail()));
            
            System.out.println("Success! Inserted document id: " + result.getInsertedId());
            inserted = true;
        } catch (Exception e) {
            System.err.println("Error when inserting new User: " + e);
        }
        
        return inserted;
    }

    @Override
    public boolean updateClient(Client client) {
        String clientIdToUpdate = client.getId().toString();
        /* Code modified from MongoDB docs
            https://www.mongodb.com/docs/drivers/java/sync/current/usage-examples/updateOne/
        */
        try {
            // Send to DB
            Document query = new Document().append("_id", new ObjectId(clientIdToUpdate));
            
            Bson updates = Updates.combine(
                    Updates.set("idCard", client.getIdCard()),
                    Updates.set("name", client.getName()),
                    Updates.set("address", client.getAddress()),
                    Updates.set("cellphone", client.getCellphone()),
                    Updates.set("email", client.getEmail())
            );
            
            try {
                UpdateResult result = database.getCollection("clients").updateOne(query, updates);
                System.out.println("Modified document count: " + result.getModifiedCount());
                System.out.println("Upserted id: " + result.getUpsertedId()); // only contains a value when an upsert is performed
            } catch (Exception e) {
                System.err.println("Unable to update client due to an error: " + e);
                return false;
            }
            
            
        } catch (Exception e) {
            System.err.println("Unable to update client due to an error: " + e);
            return false;
        }
        return true;
    }
    
}
