/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package ModelDAOImpl;

import Interfaces.InvoiceDAO;
import Model.Invoice;
import MongoDBConnection.MongoDBConnection;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Filters;
import com.mongodb.client.result.InsertOneResult;
import java.util.ArrayList;
import org.bson.Document;
import org.bson.types.ObjectId;

/**
 *
 * @author joseignacio
 */
public class InvoiceDAOImpl implements InvoiceDAO{
    
    //Attributes
    MongoDBConnection mongoConnection = new MongoDBConnection();
    MongoDatabase database = mongoConnection.getDatabase();
    MongoCollection<Document> invoicesDBResult;
    Invoice invoice;


    @Override
    public ArrayList<Invoice> listInvoices() {
        ArrayList<Invoice> invoicesList = new ArrayList<>();
        
        try {
            invoicesDBResult = database.getCollection("invoices");   
            FindIterable<Document> allInvoicesDocuments = invoicesDBResult.find();
            
            
            for (Document invoiceResult : allInvoicesDocuments)
            {
                Gson gsonMapperToObject = new GsonBuilder().setDateFormat("yyyy-mm-dd").create();
                invoice = gsonMapperToObject.fromJson(invoiceResult.toJson(), Invoice.class); 
                
                // Correct the Id generated by Gson
                String invoiceResultInJson = invoiceResult.toJson();
                String strippedOidFromJson = invoiceResultInJson.substring(18, 42); // Extraigo el $oid de mongo
                // Reemplazo el ObjectId creado por Gson con uno nuevo creado con el codigo de Mongo
                
                invoice.setId(new ObjectId(strippedOidFromJson));
                
                invoicesList.add(invoice);
            }
            
        } catch (Exception e) {
            System.out.println("Could not get the invoice information " + e);
        }
        return invoicesList;
    }

    @Override
    public Invoice listInvoice(String id) {
        try {
            invoicesDBResult = database.getCollection("invoices");   
            System.out.println("Got it through the users collection");
            System.out.println("Id is of invoice: " + id);
            Document invoiceSearched = invoicesDBResult.find(Filters.eq("_id", new ObjectId(id))).first();
            System.out.println("found!");
            
            System.out.println(invoiceSearched);
            
            Gson gsonMapperToObject = new Gson();
            invoice = gsonMapperToObject.fromJson(invoiceSearched.toJson(), Invoice.class);
            
            // Try changing the id attribute with the substring from the JSON response
            String invoiceResultInJson = invoiceSearched.toJson();
            String strippedidFromJson = invoiceResultInJson.substring(18, 42);
            invoice.setId(new ObjectId(strippedidFromJson));
            
            System.out.println(invoice);

        } catch (Exception e) {
            System.out.println("Could not get the invoice information " + e);
        }
        
        return invoice;
    }
    
   
  
    @Override
    public boolean addInvoice(Invoice invoice) {
        
        boolean inserted = false;
        
        ObjectId objectId = new ObjectId();
        // Add user into DB
        try {
           
            InsertOneResult result = database.getCollection("invoices").insertOne(
                    new Document().append("_id", objectId)
                    .append("clientIdCard", invoice.getClientIdCard())
                    .append("orderToGO", invoice.getorderToGo())
                    .append("clientName", invoice.getclientName())
                    .append("clientEmail", invoice.getclientEmail())
                    .append("subtotalInvoice", invoice.getsubtotalInvoice())
                    .append("totalTaxesInvoice", invoice.gettotalTaxesInvoice())
                    .append("totalInvoice", invoice.gettotalInvoice()));

            
            System.out.println("Success! Inserted document id: " + result.getInsertedId());
            inserted = true;
        } catch (Exception e) {
            System.err.println("Error when inserting new User: " + e);
        }
        
        return inserted;
    }

    @Override
    public boolean emailInvoiceToClient(Invoice invoice) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }


    
}
